/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "./core";
import * as Parlant from "./api/index";
export declare namespace ParlantClient {
    interface Options {
        environment: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class ParlantClient {
    protected readonly _options: ParlantClient.Options;
    constructor(_options: ParlantClient.Options);
    /**
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.rootGet()
     */
    rootGet(requestOptions?: ParlantClient.RequestOptions): Promise<unknown>;
    /**
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listAgents()
     */
    listAgents(requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.ListAgentsResponse>;
    /**
     * @param {Parlant.CreateAgentRequest} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.createAgent(undefined)
     */
    createAgent(request?: Parlant.CreateAgentRequest, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.CreateAgentResponse>;
    /**
     * @param {string} agentId
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.readAgent("agent_id")
     */
    readAgent(agentId: string, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.Agent>;
    /**
     * @param {string} agentId
     * @param {Parlant.PatchAgentRequest} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.patchAgent("agent_id")
     */
    patchAgent(agentId: string, request?: Parlant.PatchAgentRequest, requestOptions?: ParlantClient.RequestOptions): Promise<unknown>;
    /**
     * @param {string} agentId
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.listGuidelines("agent_id")
     */
    listGuidelines(agentId: string, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.ListGuidelinesResponse>;
    /**
     * @param {string} agentId
     * @param {Parlant.CreateGuidelinesRequest} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.createGuidelines("agent_id", {
     *         invoices: [{
     *                 payload: {
     *                     kind: "guideline",
     *                     content: {
     *                         predicate: "predicate",
     *                         action: "action"
     *                     },
     *                     operation: Parlant.GuidelinePayloadOperationDto.Add,
     *                     coherenceCheck: true,
     *                     connectionProposition: true
     *                 },
     *                 checksum: "checksum",
     *                 approved: true,
     *                 data: {
     *                     coherenceChecks: [{
     *                             kind: Parlant.CoherenceCheckKindDto.ContradictionWithExistingGuideline,
     *                             first: {
     *                                 predicate: "predicate",
     *                                 action: "action"
     *                             },
     *                             second: {
     *                                 predicate: "predicate",
     *                                 action: "action"
     *                             },
     *                             issue: "issue",
     *                             severity: 1
     *                         }]
     *                 }
     *             }]
     *     })
     */
    createGuidelines(agentId: string, request: Parlant.CreateGuidelinesRequest, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.CreateGuidelinesResponse>;
    /**
     * @param {string} agentId
     * @param {string} guidelineId
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.readGuideline("agent_id", "guideline_id")
     */
    readGuideline(agentId: string, guidelineId: string, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.GuidelineWithConnectionsAndToolAssociations>;
    /**
     * @param {string} agentId
     * @param {string} guidelineId
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.deleteGuideline("agent_id", "guideline_id")
     */
    deleteGuideline(agentId: string, guidelineId: string, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.DeleteGuidelineResponse>;
    /**
     * @param {string} agentId
     * @param {string} guidelineId
     * @param {Parlant.PatchGuidelineRequest} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.patchGuideline("agent_id", "guideline_id")
     */
    patchGuideline(agentId: string, guidelineId: string, request?: Parlant.PatchGuidelineRequest, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.GuidelineWithConnectionsAndToolAssociations>;
    /**
     * @param {string} agentId
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.listTerms("agent_id")
     */
    listTerms(agentId: string, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.ListTermsResponse>;
    /**
     * @param {string} agentId
     * @param {Parlant.CreateTermRequest} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.createTerm("agent_id", {
     *         name: "name",
     *         description: "description"
     *     })
     */
    createTerm(agentId: string, request: Parlant.CreateTermRequest, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.CreateTermResponse>;
    /**
     * @param {string} agentId
     * @param {string} termId
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.readTerm("agent_id", "term_id")
     */
    readTerm(agentId: string, termId: string, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.Term>;
    /**
     * @param {string} agentId
     * @param {string} termId
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.deleteTerm("agent_id", "term_id")
     */
    deleteTerm(agentId: string, termId: string, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.DeleteTermResponse>;
    /**
     * @param {string} agentId
     * @param {string} termId
     * @param {Parlant.PatchTermRequest} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.patchTerm("agent_id", "term_id")
     */
    patchTerm(agentId: string, termId: string, request?: Parlant.PatchTermRequest, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.Term>;
    /**
     * @param {string} agentId
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.listVariables("agent_id")
     */
    listVariables(agentId: string, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.ListContextVariablesResponse>;
    /**
     * @param {string} agentId
     * @param {Parlant.CreateContextVariableRequest} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.createVariable("agent_id", {
     *         name: "name"
     *     })
     */
    createVariable(agentId: string, request: Parlant.CreateContextVariableRequest, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.CreateContextVariableResponse>;
    /**
     * @param {string} agentId
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.deleteVariables("agent_id")
     */
    deleteVariables(agentId: string, requestOptions?: ParlantClient.RequestOptions): Promise<void>;
    /**
     * @param {string} agentId
     * @param {string} variableId
     * @param {Parlant.ReadVariableRequest} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.readVariable("agent_id", "variable_id")
     */
    readVariable(agentId: string, variableId: string, request?: Parlant.ReadVariableRequest, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.ReadContextVariableResponse>;
    /**
     * @param {string} agentId
     * @param {string} variableId
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.deleteVariable("agent_id", "variable_id")
     */
    deleteVariable(agentId: string, variableId: string, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.DeleteContextVariableReponse>;
    /**
     * @param {string} agentId
     * @param {string} variableId
     * @param {string} key
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.readVariableValue("agent_id", "variable_id", "key")
     */
    readVariableValue(agentId: string, variableId: string, key: string, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.ContextVariableValue>;
    /**
     * @param {string} agentId
     * @param {string} variableId
     * @param {string} key
     * @param {Parlant.UpdateContextVariableValueRequest} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.updateVariableValue("agent_id", "variable_id", "key", {
     *         data: "data"
     *     })
     */
    updateVariableValue(agentId: string, variableId: string, key: string, request: Parlant.UpdateContextVariableValueRequest, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.UpdateContextVariableValueResponse>;
    /**
     * @param {string} agentId
     * @param {string} variableId
     * @param {string} key
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.deleteValue("agent_id", "variable_id", "key")
     */
    deleteValue(agentId: string, variableId: string, key: string, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.DeleteContextVariableValueResponse>;
    /**
     * @param {Parlant.ListSessionsRequest} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.listSessions()
     */
    listSessions(request?: Parlant.ListSessionsRequest, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.ListSessionsResponse>;
    /**
     * @param {Parlant.CreateSessionRequest} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.createSession({
     *         endUserId: "end_user_id",
     *         agentId: "agent_id"
     *     })
     */
    createSession(request: Parlant.CreateSessionRequest, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.CreateSessionResponse>;
    /**
     * @param {Parlant.DeleteSessionsRequest} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.deleteSessions()
     */
    deleteSessions(request?: Parlant.DeleteSessionsRequest, requestOptions?: ParlantClient.RequestOptions): Promise<void>;
    /**
     * @param {string} sessionId
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.readSession("session_id")
     */
    readSession(sessionId: string, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.Session>;
    /**
     * @param {string} sessionId
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.deleteSession("session_id")
     */
    deleteSession(sessionId: string, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.DeleteSessionResponse>;
    /**
     * @param {string} sessionId
     * @param {Parlant.PatchSessionRequest} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.patchSession("session_id")
     */
    patchSession(sessionId: string, request?: Parlant.PatchSessionRequest, requestOptions?: ParlantClient.RequestOptions): Promise<unknown>;
    /**
     * @param {string} sessionId
     * @param {Parlant.ListEventsRequest} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.listEvents("session_id")
     */
    listEvents(sessionId: string, request?: Parlant.ListEventsRequest, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.ListEventsResponse>;
    /**
     * @param {string} sessionId
     * @param {Parlant.CreateEventRequest} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.createEvent("session_id", {
     *         kind: Parlant.EventKindDto.Message,
     *         source: Parlant.EventSourceDto.EndUser,
     *         content: "content"
     *     })
     */
    createEvent(sessionId: string, request: Parlant.CreateEventRequest, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.CreateEventResponse>;
    /**
     * @param {string} sessionId
     * @param {Parlant.DeleteEventsRequest} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.deleteEvents("session_id", {
     *         minOffset: 1
     *     })
     */
    deleteEvents(sessionId: string, request: Parlant.DeleteEventsRequest, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.DeleteEventsResponse>;
    /**
     * @param {string} sessionId
     * @param {Parlant.ListInteractionsRequest} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.listInteractions("session_id", {
     *         minEventOffset: 1,
     *         source: Parlant.EventSourceDto.EndUser
     *     })
     */
    listInteractions(sessionId: string, request: Parlant.ListInteractionsRequest, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.ListInteractionsResponse>;
    /**
     * @param {string} sessionId
     * @param {Parlant.CreateInteractionsRequest} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.createInteractions("session_id")
     */
    createInteractions(sessionId: string, request?: Parlant.CreateInteractionsRequest, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.CreateInteractionsResponse>;
    /**
     * @param {string} sessionId
     * @param {string} correlationId
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.readInteraction("session_id", "correlation_id")
     */
    readInteraction(sessionId: string, correlationId: string, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.ReadInteractionResponse>;
    /**
     * @param {Parlant.CreateEvaluationRequest} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.createEvaluation({
     *         agentId: "agent_id",
     *         payloads: [{
     *                 kind: "guideline",
     *                 content: {
     *                     predicate: "predicate",
     *                     action: "action"
     *                 },
     *                 operation: Parlant.GuidelinePayloadOperationDto.Add,
     *                 coherenceCheck: true,
     *                 connectionProposition: true
     *             }]
     *     })
     */
    createEvaluation(request: Parlant.CreateEvaluationRequest, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.CreateEvaluationResponse>;
    /**
     * @param {string} evaluationId
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.readEvaluation("evaluation_id")
     */
    readEvaluation(evaluationId: string, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.ReadEvaluationResponse>;
    /**
     * @param {string} name
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.readService("name")
     */
    readService(name: string, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.Service>;
    /**
     * @param {string} name
     * @param {Parlant.Request} request
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.upsertService("name", {
     *         url: "url"
     *     })
     */
    upsertService(name: string, request: Parlant.Request, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.CreateServiceResponse>;
    /**
     * @param {string} name
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.deleteService("name")
     */
    deleteService(name: string, requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.DeleteServiceResponse>;
    /**
     * @param {ParlantClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.listServices()
     */
    listServices(requestOptions?: ParlantClient.RequestOptions): Promise<Parlant.ListServicesResponse>;
}
