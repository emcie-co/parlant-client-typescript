/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as Parlant from "../../../index";
export declare namespace Customers {
    interface Options {
        environment: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Customers {
    protected readonly _options: Customers.Options;
    constructor(_options: Customers.Options);
    /**
     * @param {Customers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.list()
     */
    list(requestOptions?: Customers.RequestOptions): core.APIPromise<Parlant.Customer[]>;
    /**
     * @param {Parlant.CustomerCreationParams} request
     * @param {Customers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.customers.create({
     *         name: "name"
     *     })
     */
    create(request: Parlant.CustomerCreationParams, requestOptions?: Customers.RequestOptions): core.APIPromise<Parlant.Customer>;
    /**
     * @param {string} customerId
     * @param {Customers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.customers.retrieve("customer_id")
     */
    retrieve(customerId: string, requestOptions?: Customers.RequestOptions): core.APIPromise<Parlant.Customer>;
    /**
     * @param {string} customerId
     * @param {Customers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.customers.delete("customer_id")
     */
    delete(customerId: string, requestOptions?: Customers.RequestOptions): core.APIPromise<void>;
    /**
     * @param {string} customerId
     * @param {Parlant.CustomerUpdateParams} request
     * @param {Customers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.customers.update("customer_id")
     */
    update(customerId: string, request?: Parlant.CustomerUpdateParams, requestOptions?: Customers.RequestOptions): core.APIPromise<void>;
}
