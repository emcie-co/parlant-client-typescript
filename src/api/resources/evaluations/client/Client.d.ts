/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as Parlant from "../../../index";
export declare namespace Evaluations {
    interface Options {
        environment: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Evaluations {
    protected readonly _options: Evaluations.Options;
    constructor(_options: Evaluations.Options);
    /**
     * Creates a new evaluation task for the specified agent.
     *
     * An evaluation analyzes proposed changes (payloads) to an agent's guidelines
     * to ensure coherence and consistency with existing guidelines and the agent's
     * configuration. This helps maintain predictable agent behavior by detecting
     * potential conflicts and unintended consequences before applying changes.
     *
     * Returns immediately with the created evaluation's initial state.
     *
     * @param {Parlant.EvaluationCreationParams} request
     * @param {Evaluations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.evaluations.create({
     *         agentId: "a1g2e3n4t5",
     *         payloads: [{
     *                 kind: "guideline",
     *                 guideline: {
     *                     content: {
     *                         condition: "when customer asks about pricing",
     *                         action: "provide current pricing information"
     *                     },
     *                     operation: "add",
     *                     coherenceCheck: true,
     *                     connectionProposition: true
     *                 }
     *             }]
     *     })
     */
    create(request: Parlant.EvaluationCreationParams, requestOptions?: Evaluations.RequestOptions): Promise<Parlant.Evaluation>;
    /**
     * Retrieves the current state of an evaluation.
     *
     * - If wait_for_completion == 0, returns current state immediately.
     * - If wait_for_completion > 0, waits for completion/failure or timeout. Defaults to 60.
     *
     * Notes:
     * When wait_for_completion > 0:
     *
     * - Returns final state if evaluation completes within timeout
     * - Raises 504 if timeout is reached before completion
     *
     * @param {string} evaluationId - Unique identifier of the evaluation to retrieve
     * @param {Parlant.EvaluationsRetrieveRequest} request
     * @param {Evaluations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.NotFoundError}
     * @throws {@link Parlant.UnprocessableEntityError}
     * @throws {@link Parlant.GatewayTimeoutError}
     *
     * @example
     *     await client.evaluations.retrieve("evaluation_id")
     */
    retrieve(evaluationId: string, request?: Parlant.EvaluationsRetrieveRequest, requestOptions?: Evaluations.RequestOptions): Promise<Parlant.Evaluation>;
}
