/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as Parlant from "../../../index";
export declare namespace Evaluations {
    interface Options {
        environment: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Evaluations {
    protected readonly _options: Evaluations.Options;
    constructor(_options: Evaluations.Options);
    /**
     * @param {Parlant.EvaluationCreationParams} request
     * @param {Evaluations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.evaluations.create({
     *         agentId: "agent_id",
     *         payloads: [{
     *                 kind: "guideline"
     *             }]
     *     })
     */
    create(request: Parlant.EvaluationCreationParams, requestOptions?: Evaluations.RequestOptions): Promise<Parlant.Evaluation>;
    /**
     * @param {string} evaluationId
     * @param {Parlant.EvaluationsRetrieveRequest} request
     * @param {Evaluations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.evaluations.retrieve("evaluation_id")
     */
    retrieve(evaluationId: string, request?: Parlant.EvaluationsRetrieveRequest, requestOptions?: Evaluations.RequestOptions): Promise<Parlant.Evaluation>;
}
