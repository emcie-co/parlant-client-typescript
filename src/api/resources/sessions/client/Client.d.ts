/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as Parlant from "../../../index";
export declare namespace Sessions {
    interface Options {
        environment: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Sessions {
    protected readonly _options: Sessions.Options;
    constructor(_options: Sessions.Options);
    /**
     * @param {Parlant.SessionsListRequest} request
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.list()
     */
    list(request?: Parlant.SessionsListRequest, requestOptions?: Sessions.RequestOptions): Promise<Parlant.ListSessionsResponse>;
    /**
     * @param {Parlant.CreateSessionRequest} request
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.create({
     *         endUserId: "end_user_id",
     *         agentId: "agent_id"
     *     })
     */
    create(request: Parlant.CreateSessionRequest, requestOptions?: Sessions.RequestOptions): Promise<Parlant.CreateSessionResponse>;
    /**
     * @param {Parlant.SessionsDeleteManyRequest} request
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.deleteMany()
     */
    deleteMany(request?: Parlant.SessionsDeleteManyRequest, requestOptions?: Sessions.RequestOptions): Promise<void>;
    /**
     * @param {string} sessionId
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.retrieve("session_id")
     */
    retrieve(sessionId: string, requestOptions?: Sessions.RequestOptions): Promise<Parlant.Session>;
    /**
     * @param {string} sessionId
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.delete("session_id")
     */
    delete(sessionId: string, requestOptions?: Sessions.RequestOptions): Promise<Parlant.DeleteSessionResponse>;
    /**
     * @param {string} sessionId
     * @param {Parlant.SessionUpdateParams} request
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.update("session_id")
     */
    update(sessionId: string, request?: Parlant.SessionUpdateParams, requestOptions?: Sessions.RequestOptions): Promise<unknown>;
    /**
     * @param {string} sessionId
     * @param {Parlant.SessionsListEventsRequest} request
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.listEvents("session_id")
     */
    listEvents(sessionId: string, request?: Parlant.SessionsListEventsRequest, requestOptions?: Sessions.RequestOptions): Promise<Parlant.EventListResponse>;
    /**
     * @param {string} sessionId
     * @param {Parlant.EventCreationParams} request
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.createEvent("session_id", {
     *         kind: Parlant.EventKindDto.Message,
     *         source: Parlant.EventSourceDto.EndUser,
     *         content: "content"
     *     })
     */
    createEvent(sessionId: string, request: Parlant.EventCreationParams, requestOptions?: Sessions.RequestOptions): Promise<Parlant.EventCreationResponse>;
    /**
     * @param {string} sessionId
     * @param {Parlant.SessionsDeleteEventsRequest} request
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.deleteEvents("session_id", {
     *         minOffset: 1
     *     })
     */
    deleteEvents(sessionId: string, request: Parlant.SessionsDeleteEventsRequest, requestOptions?: Sessions.RequestOptions): Promise<Parlant.EventDeletionResponse>;
    /**
     * @param {string} sessionId
     * @param {Parlant.SessionsListInteractionsRequest} request
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.listInteractions("session_id", {
     *         minEventOffset: 1,
     *         source: Parlant.EventSourceDto.EndUser
     *     })
     */
    listInteractions(sessionId: string, request: Parlant.SessionsListInteractionsRequest, requestOptions?: Sessions.RequestOptions): Promise<Parlant.InteractionListResponse>;
    /**
     * @param {string} sessionId
     * @param {Parlant.SessionsCreateInteractionRequest} request
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.createInteraction("session_id")
     */
    createInteraction(sessionId: string, request?: Parlant.SessionsCreateInteractionRequest, requestOptions?: Sessions.RequestOptions): Promise<Parlant.InteractionCreationResponse>;
    /**
     * @param {string} sessionId
     * @param {string} correlationId
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.retrieveInteraction("session_id", "correlation_id")
     */
    retrieveInteraction(sessionId: string, correlationId: string, requestOptions?: Sessions.RequestOptions): Promise<Parlant.InteractionReadResponse>;
}
