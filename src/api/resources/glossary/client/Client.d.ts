/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as Parlant from "../../../index";
export declare namespace Glossary {
    interface Options {
        environment: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Glossary {
    protected readonly _options: Glossary.Options;
    constructor(_options: Glossary.Options);
    /**
     * Retrieves a list of all terms in the agent's glossary.
     *
     * Returns an empty list if no terms associated to the provided agent's ID.
     * Terms are returned in no guaranteed order.
     *
     * @param {string} agentId - Unique identifier for the agent associated with the term.
     * @param {Glossary.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.glossary.listTerms("agent_id")
     */
    listTerms(agentId: string, requestOptions?: Glossary.RequestOptions): Promise<Parlant.Term[]>;
    /**
     * Creates a new term in the agent's glossary.
     *
     * The term will be initialized with the provided name and description, and optional synonyms.
     * The term will be associated with the specified agent.
     * A unique identifier will be automatically generated.
     *
     * Default behaviors:
     *
     * - `synonyms` defaults to an empty list if not provided
     *
     * @param {string} agentId - Unique identifier for the agent associated with the term.
     * @param {Parlant.TermCreationParams} request
     * @param {Glossary.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.glossary.createTerm("agent_id", {
     *         name: "Gas",
     *         description: "A unit in Ethereum that measures the computational effort to execute transactions or smart contracts",
     *         synonyms: ["Transaction Fee", "Blockchain Fuel"]
     *     })
     */
    createTerm(agentId: string, request: Parlant.TermCreationParams, requestOptions?: Glossary.RequestOptions): Promise<Parlant.Term>;
    /**
     * Retrieves details of a specific term by ID for a given agent.
     *
     * @param {string} agentId - Unique identifier for the agent associated with the term.
     * @param {string} termId
     * @param {Glossary.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.NotFoundError}
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.glossary.retrieveTerm("agent_id", "term_id")
     */
    retrieveTerm(agentId: string, termId: string, requestOptions?: Glossary.RequestOptions): Promise<Parlant.Term>;
    /**
     * Deletes a term from the system.
     *
     * Deleting a non-existent term will return 404.
     * No content will be returned from a successful deletion.
     *
     * @param {string} agentId - Unique identifier for the agent associated with the term.
     * @param {string} termId
     * @param {Glossary.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.NotFoundError}
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.glossary.deleteTerm("agent_id", "term_id")
     */
    deleteTerm(agentId: string, termId: string, requestOptions?: Glossary.RequestOptions): Promise<void>;
    /**
     * @param {string} agentId - Unique identifier for the agent associated with the term.
     * @param {string} termId
     * @param {Parlant.TermUpdateParams} request
     * @param {Glossary.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.NotFoundError}
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.glossary.updateTerm("agent_id", "term_id", {
     *         name: "Gas",
     *         description: "A unit in Ethereum that measures the computational effort to execute transactions or smart contracts",
     *         synonyms: ["Transaction Fee", "Blockchain Fuel"]
     *     })
     */
    updateTerm(agentId: string, termId: string, request?: Parlant.TermUpdateParams, requestOptions?: Glossary.RequestOptions): Promise<Parlant.Term>;
}
