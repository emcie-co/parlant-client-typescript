/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as Parlant from "../../../index";
export declare namespace Guidelines {
    interface Options {
        environment: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Guidelines {
    protected readonly _options: Guidelines.Options;
    constructor(_options: Guidelines.Options);
    /**
     * Lists all guidelines for the specified agent.
     *
     * Returns an empty list if no guidelines exist.
     * Guidelines are returned in no guaranteed order.
     * Does not include connections or tool associations.
     *
     * @param {string} agentId - Unique identifier for the agent
     * @param {Guidelines.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.NotFoundError}
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.guidelines.list("agent_id")
     */
    list(agentId: string, requestOptions?: Guidelines.RequestOptions): Promise<Parlant.Guideline[]>;
    /**
     * Creates new guidelines from the provided invoices.
     *
     * Invoices are obtained by calling the `create_evaluation` method of the client.
     * (Equivalent to making a POST request to `/index/evaluations`)
     * See the [documentation](https://parlant.io/docs/concepts/customization/guidelines) for more information.
     *
     * The guidelines are created in the specified agent's guideline set.
     * Tool associations and connections are automatically handled.
     *
     * @param {string} agentId - Unique identifier for the agent
     * @param {Parlant.GuidelineCreationParams} request
     * @param {Guidelines.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.NotFoundError}
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.guidelines.create("agent_id", {
     *         invoices: [{
     *                 payload: {
     *                     kind: "guideline",
     *                     guideline: {
     *                         content: {
     *                             condition: "when the customer asks about pricing",
     *                             action: "provide current pricing information"
     *                         },
     *                         operation: "add",
     *                         coherenceCheck: true,
     *                         connectionProposition: true
     *                     }
     *                 },
     *                 checksum: "abc123",
     *                 approved: true,
     *                 data: {
     *                     guideline: {
     *                         coherenceChecks: [{
     *                                 kind: "contradiction_with_existing_guideline",
     *                                 first: {
     *                                     condition: "User is frustrated",
     *                                     action: "Respond with technical details"
     *                                 },
     *                                 second: {
     *                                     condition: "User is frustrated",
     *                                     action: "Focus on emotional support first"
     *                                 },
     *                                 issue: "Conflicting approaches to handling user frustration",
     *                                 severity: 7
     *                             }],
     *                         connectionPropositions: [{
     *                                 checkKind: "connection_with_existing_guideline",
     *                                 source: {
     *                                     condition: "User mentions technical problem",
     *                                     action: "Request system logs"
     *                                 },
     *                                 target: {
     *                                     condition: "System logs are available",
     *                                     action: "Analyze logs for error patterns"
     *                                 },
     *                                 connectionKind: "suggests"
     *                             }]
     *                     }
     *                 }
     *             }]
     *     })
     */
    create(agentId: string, request: Parlant.GuidelineCreationParams, requestOptions?: Guidelines.RequestOptions): Promise<Parlant.GuidelineCreationResult>;
    /**
     * Retrieves a specific guideline with all its connections and tool associations.
     *
     * Returns both direct and indirect connections between guidelines.
     * Tool associations indicate which tools the guideline can use.
     *
     * @param {string} agentId - Unique identifier for the agent
     * @param {string} guidelineId - Unique identifier for the guideline
     * @param {Guidelines.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.NotFoundError}
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.guidelines.retrieve("agent_id", "guideline_id")
     */
    retrieve(agentId: string, guidelineId: string, requestOptions?: Guidelines.RequestOptions): Promise<Parlant.GuidelineWithConnectionsAndToolAssociations>;
    /**
     * Deletes a guideline from the agent.
     *
     * Also removes all associated connections and tool associations.
     * Deleting a non-existent guideline will return 404.
     * No content will be returned from a successful deletion.
     *
     * @param {string} agentId - Unique identifier for the agent
     * @param {string} guidelineId - Unique identifier for the guideline
     * @param {Guidelines.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.NotFoundError}
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.guidelines.delete("agent_id", "guideline_id")
     */
    delete(agentId: string, guidelineId: string, requestOptions?: Guidelines.RequestOptions): Promise<void>;
    /**
     * Updates a guideline's connections and tool associations.
     *
     * Only provided attributes will be updated; others remain unchanged.
     *
     * Connection rules:
     *
     * - A guideline cannot connect to itself
     * - Only direct connections can be removed
     * - The connection must specify this guideline as source or target
     *
     * Tool Association rules:
     *
     * - Tool services and tools must exist before creating associations
     *
     * @param {string} agentId - Unique identifier for the agent
     * @param {string} guidelineId - Unique identifier for the guideline
     * @param {Parlant.GuidelineUpdateParams} request
     * @param {Guidelines.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.NotFoundError}
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.guidelines.update("agent_id", "guideline_id", {
     *         connections: {
     *             add: [{
     *                     source: "guide_123xyz",
     *                     target: "guide_789xyz",
     *                     kind: "suggests"
     *                 }],
     *             remove: ["guide_456xyz"]
     *         },
     *         toolAssociations: {
     *             add: [{
     *                     serviceName: "pricing_service",
     *                     toolName: "get_prices"
     *                 }],
     *             remove: [{
     *                     serviceName: "old_service",
     *                     toolName: "old_tool"
     *                 }]
     *         }
     *     })
     */
    update(agentId: string, guidelineId: string, request?: Parlant.GuidelineUpdateParams, requestOptions?: Guidelines.RequestOptions): Promise<Parlant.GuidelineWithConnectionsAndToolAssociations>;
}
