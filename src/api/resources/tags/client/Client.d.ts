/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as Parlant from "../../../index";
export declare namespace Tags {
    interface Options {
        environment: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Tags {
    protected readonly _options: Tags.Options;
    constructor(_options: Tags.Options);
    /**
     * @param {Tags.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tags.list()
     */
    list(requestOptions?: Tags.RequestOptions): Promise<Parlant.Tag[]>;
    /**
     * @param {Parlant.TagCreationParams} request
     * @param {Tags.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.tags.create({
     *         name: "name"
     *     })
     */
    create(request: Parlant.TagCreationParams, requestOptions?: Tags.RequestOptions): Promise<Parlant.Tag>;
    /**
     * @param {string} tagId
     * @param {Tags.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.tags.retrieve("tag_id")
     */
    retrieve(tagId: string, requestOptions?: Tags.RequestOptions): Promise<Parlant.Tag>;
    /**
     * @param {string} tagId
     * @param {Tags.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.tags.delete("tag_id")
     */
    delete(tagId: string, requestOptions?: Tags.RequestOptions): Promise<void>;
    /**
     * @param {string} tagId
     * @param {Parlant.TagUpdateParams} request
     * @param {Tags.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.tags.update("tag_id", {
     *         name: "name"
     *     })
     */
    update(tagId: string, request: Parlant.TagUpdateParams, requestOptions?: Tags.RequestOptions): Promise<void>;
}
