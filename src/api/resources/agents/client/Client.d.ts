/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as Parlant from "../../../index";
export declare namespace Agents {
    interface Options {
        environment: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Agents {
    protected readonly _options: Agents.Options;
    constructor(_options: Agents.Options);
    /**
     * Retrieves a list of all agents in the system.
     *
     * Returns an empty list if no agents exist.
     * Agents are returned in no guaranteed order.
     *
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.agents.list()
     */
    list(requestOptions?: Agents.RequestOptions): Promise<Parlant.Agent[]>;
    /**
     * Creates a new agent in the system.
     *
     * The agent will be initialized with the provided name and optional settings.
     * A unique identifier will be automatically generated.
     *
     * Default behaviors:
     *
     * - `name` defaults to `"Unnamed Agent"` if not provided
     * - `description` defaults to `None`
     * - `max_engine_iterations` defaults to `None` (uses system default)
     *
     * @param {Parlant.AgentCreationParams} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.create({
     *         name: "Technical Support Assistant",
     *         description: "Specialized in handling technical support queries with deep knowledge of our product suite",
     *         maxEngineIterations: 3
     *     })
     */
    create(request?: Parlant.AgentCreationParams, requestOptions?: Agents.RequestOptions): Promise<Parlant.Agent>;
    /**
     * Retrieves details of a specific agent by ID.
     *
     * @param {string} agentId - Unique identifier for the agent
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.NotFoundError}
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.retrieve("agent_id")
     */
    retrieve(agentId: string, requestOptions?: Agents.RequestOptions): Promise<Parlant.Agent>;
    /**
     * Deletes an agent from the system.
     *
     * Deleting a non-existent agent will return 404.
     * No content will be returned from a successful deletion.
     *
     * @param {string} agentId - Unique identifier for the agent
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.NotFoundError}
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.delete("agent_id")
     */
    delete(agentId: string, requestOptions?: Agents.RequestOptions): Promise<void>;
    /**
     * Updates an existing agent's attributes.
     *
     * Only the provided attributes will be updated; others will remain unchanged.
     * The agent's ID and creation timestamp cannot be modified.
     *
     * @param {string} agentId - Unique identifier for the agent
     * @param {Parlant.AgentUpdateParams} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Parlant.NotFoundError}
     * @throws {@link Parlant.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.update("agent_id", {
     *         name: "Technical Support Assistant",
     *         description: "Specialized in handling technical support queries with deep knowledge of our product suite",
     *         maxEngineIterations: 3
     *     })
     */
    update(agentId: string, request?: Parlant.AgentUpdateParams, requestOptions?: Agents.RequestOptions): Promise<Parlant.Agent>;
}
